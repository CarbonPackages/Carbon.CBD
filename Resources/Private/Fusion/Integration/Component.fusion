prototype(Carbon.CBD:Component) < prototype(Neos.Neos:ContentComponent) {
    contentCollectionRenderer = Neos.Neos:ContentCollectionRenderer {
        @context.cbd = true
    }
    count = ${q(node).children().count()}
    editable = ${node.context.inBackend}
    data = Neos.Fusion:DataStructure

    # Add here your Fusion Prototype
    type = null

    content = Neos.Fusion:Loop {
        prototype(Neos.Neos:ContentElementWrapping) {
            @if.wrapping = false
        }
        prototype(Neos.Neos:Editable) {
            renderer.editable.condition = false
        }
        items = ${q(node).children()}
        itemRenderer = Neos.Neos:ContentCase
        itemName = 'node'
        iterationName = 'iterator'
    }

    renderer = afx`<Carbon.CBD:Presentation.Wrapper {...props} />`

    @context.type = ${this.type}
    @cache {
        mode = 'cached'
        entryIdentifier {
            collection = ${node}
            type = ${type}
        }
        entryTags {
            1 = ${Neos.Caching.descendantOfTag(node)}
            2 = ${Neos.Caching.nodeTag(node)}
        }
        maximumLifetime = ${q(node).context({'invisibleContentShown': true}).children().cacheLifetime()}
    }

    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
